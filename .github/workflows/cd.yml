name: Continuous Deployment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    
permissions:
  actions: read
  contents: read
  id-token: write

env:
  AWS_REGION: us-east-1
  TF_FOLDER_PATH: infrastructure/terraform
  TF_EXECUTION_PLAN_FILE_NAME: execution-plan
  TF_PLUGIN_CACHE_DIR: ${{ github.workspace }}/.terraform.d/plugin-cache

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-22.04
    outputs:
      bucket_name: ${{ steps.provision.outputs.BUCKET_NAME }}
    defaults:
      run:
        working-directory: ${{ env.TF_FOLDER_PATH }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_ARN }}

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Terraform plugin cache directory
        run: mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}

      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: ${{ env.TF_PLUGIN_CACHE_DIR }}
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/.terraform.lock.hcl') }}
          restore-keys: ${{ runner.os }}-terraform-

      - name: Get Terraform version
        id: get_tf_version
        run: echo "TF_VERSION=$(cat .terraform.version)" >> $GITHUB_OUTPUT

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}

      - name: Initialize Terraform
        run: terraform init

      - name: Format
        run: terraform fmt -check

      - name: Validate
        run: terraform validate

      - name: Plan
        run: terraform plan -out=${{ env.TF_EXECUTION_PLAN_FILE_NAME }}

      - name: Upload plan artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.TF_EXECUTION_PLAN_FILE_NAME }}
          path: ${{ env.TF_FOLDER_PATH }}/${{ env.TF_EXECUTION_PLAN_FILE_NAME }}
          
      - name: Provision the new resources
        id: provision
        run: |
          terraform apply ${{ env.TF_EXECUTION_PLAN_FILE_NAME }}
          echo "BUCKET_NAME=$(terraform output bucket_name)" >> $GITHUB_OUTPUT 
  
  deploy-app:
    runs-on: ubuntu-22.04
    needs: deploy-infrastructure
    steps:
      - name: Download build artifact
        uses: dawidd6/action-download-artifact@v2.24.2
        with:
          workflow: ci.yml
          name: build
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.ROLE_ARN }}
        
      - name: Sync build with S3
        run: aws s3 sync . s3://${{ needs.deploy-infrastructure.outputs.bucket_name }}